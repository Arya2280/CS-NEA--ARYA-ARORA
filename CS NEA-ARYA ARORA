from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk,ImageDraw
import time
from random import randint
import random
from tkinter import Tk, Canvas, PhotoImage
from tkinter import PhotoImage
import tkinter as tk
from tkinter import Label, Button,messagebox






class Ludo:

    def __init__(self, root, six_side_block, five_side_block, four_side_block, three_side_block, two_side_block, one_side_block):
        # constructor code
        self.root = root

        self.dice_value = 0

        # Creating a frame for dice
        self.dice_frame = Frame(root)
        self.dice_frame.pack()

        # Creating a label for displaying dice value
        self.dice_label = Label(self.dice_frame, font=('helvetica', 36), text='')
        self.dice_label.pack()

        # Create a button to roll the dice
        self.roll_button = Button(self.dice_frame, font=('helvetica', 20, 'bold'), text='Roll!', command=self.rolldice,
                                  bg="orange")
        self.roll_button.pack(side='bottom')

    def rolldice(self):
        # Generate a random dice value and update the label
        dice = ['\u2680', '\u2681', '\u2682', '\u2683', '\u2684', '\u2685']
        self.dice_value = random.choice(dice)
        self.dice_label.configure(text=self.dice_value)


        self.block_six_side = six_side_block
        self.block_five_side = five_side_block
        self.block_four_side = four_side_block
        self.block_three_side =three_side_block
        self.block_two_side = two_side_block
        self.block_one_side = one_side_block
        # making a canvas
        self.make_canvas = Canvas(self.root, bg="#0077b6", width=800, height=630)
        self.make_canvas.pack(fill=BOTH, expand=1)

        self.made_red_coin = []
        self.made_yellow_coin = []
        self.made_green_coin = []
        self.made_blue_coin = []

        self.red_number_label = []
        self.yellow_number_label = []
        self.green_number_label = []
        self.blue_number_label = []

        self.block_value_roll = []
        self.total_people_play = []

        # store player image or username or number
        self.block_number_side = [one_side_block, two_side_block, three_side_block, four_side_block, five_side_block, six_side_block]

        # used for storing specific positions of all coins or tokens
        self.red_coord_store = [-1, -1, -1, -1]
        self.yellow_coord_store = [-1, -1, -1, 1]
        self.green_coord_store = [-1, -1, -1, -1]
        self.blue_coord_store = [-1, -1, -1, -1]

        self.red_coin_position = [0, 1, 2, 3]
        self.yellow_coin_position = [0, 1, 2, 3]
        self.green_coin_position = [0, 1, 2, 3]
        self.blue_coin_position = [0, 1, 2, 3]

        for index in range(len(self.red_coin_position)):  # coin position set to -1 by default
            self.red_coin_position[index] = -1
            self.yellow_coin_position[index] = -1
            self.green_coin_position[index] = -1
            self.blue_coin_position[index] = -1

        # this corresponds to a specific value on the game board,
        # will be stored in this variable for later use
        self.move = Move()  # Assuming Move is a class that has attributes red_counter, yellow_counter, green_counter, and blue_counter

        # Number to room to be traverse by specific color coin, store in that variable
        self.move_red_counter = 0
        self.move_green_counter = 0
        self.move_yellow_counter = 0
        self.move_sky_blue_counter = 0

        self.take_permission = 0
        self.six_with_overlap = 0
        self.red_store_active = 0
        self.yellow_store_active = 0
        self.green_store_active = 0
        self.blue_store_active = 0

        self.six_counter = 0
        self.up_star = None

        # Default functions
        self.board_set_up()
        # setting up the main game board

    def board_set_up(self):  # cover box
        self.dice=Label(root, font=('helvetica', 250, 'bold',), text='')

        # square boxes
        self.make_canvas.create_rectangle(100, 15, 100 + 240, 15 + 240, width=3, fill="red")#top left large box
        self.make_canvas.create_rectangle(100, (15 + 240) + (40 * 3), 100 + 240, (15 + 240) + (40 * 3) + (40 * 6),width=3, fill="blue")#bottom left large box
        self.make_canvas.create_rectangle(340 + (40 * 3), 15, 340 + (40 * 3) + (40 * 6), 15 + 240, width=3,fill="green")#top right large box
        self.make_canvas.create_rectangle(340 + (40 * 3), (15 + 240) + (40 * 3), 340 + (40 * 3) + (40 * 6), (15 + 240) + (40 * 3) + (40 * 6), width=3,fill="yellow")#bottom right large box

        # line that corresponds the red square
        self.make_canvas.create_rectangle(100, (15 + 240), 100 + 240, (15 + 240) + 40, width=3)
        self.make_canvas.create_rectangle(100 + 40, (15 + 240) + 40, 100 + 240, (15 + 240) + 40 + 40, width=3,
                                          fill="red")
        self.make_canvas.create_rectangle(100, (15 + 240) + 80, 100 + 240, (15 + 240) + 80 + 40, width=3)

        # line that corresponds the green square
        self.make_canvas.create_rectangle(100 + 240, 15, 100 + 240 + 40, 15 + (40 * 6), width=3)
        self.make_canvas.create_rectangle(100 + 240 + 40, 15 + 40, 100 + 240 + 80, 15 + (40 * 6), width=3,
                                          fill="green")
        self.make_canvas.create_rectangle(100 + 240 + 80, 15, 100 + 240 + 80 + 40, 15 + (40 * 6), width=3)

        # line that corresponds the yellow square
        self.make_canvas.create_rectangle(340 + (40 * 3), 15 + 240, 340 + (40 * 3) + (40 * 6), 15 + 240 + 40, width=3)
        self.make_canvas.create_rectangle(340 + (40 * 3), 15 + 240 + 40, 340 + (40 * 3) + (40 * 6) - 40, 15 + 240 + 80,
                                          width=3, fill="yellow")
        self.make_canvas.create_rectangle(340 + (40 * 3), 15 + 240 + 80, 340 + (40 * 3) + (40 * 6), 15 + 240 + 120,
                                          width=3)

        # line that corresponds the blue square
        self.make_canvas.create_rectangle(100, (15 + 240) + (40 * 3), 100 + 240 + 40, (15 + 240) + (40 * 3) + (40 * 6),
                                          width=3)
        self.make_canvas.create_rectangle(100 + 240 + 40, (15 + 240) + (40 * 3), 100 + 240 + 40 + 40,
                                          (15 + 240) + (40 * 3) + (40 * 6) - 40, width=3, fill="blue")
        self.make_canvas.create_rectangle(100 + 240 + 40 + 40, (15 + 240) + (40 * 3), 100 + 240 + 40 + 40 + 40,
                                          (15 + 240) + (40 * 3) + (40 * 6), width=3)

        # All left separation line
        start_x = 100 + 40
        start_y = 15 + 240
        end_x = 100 + 40
        end_y = 15 + 240 + (40 * 3)
        for _ in range(5):
            self.make_canvas.create_line(start_x, start_y, end_x, end_y, width=3)
            start_x += 40
            end_x += 40

        # All right separation line
        start_x = 100 + 240 + (40 * 3) + 40
        start_y = 15 + 240
        end_x = 100 + 240 + (40 * 3) + 40
        end_y = 15 + 240 + (40 * 3)
        for _ in range(5):
            self.make_canvas.create_line(start_x, start_y, end_x, end_y, width=3)
            start_x += 40
            end_x += 40

        # All up separation done
        start_x = 100 + 240
        start_y = 15 + 40
        end_x = 100 + 240 + (40 * 3)
        end_y = 15 + 40
        for _ in range(5):
            self.make_canvas.create_line(start_x, start_y, end_x, end_y, width=3)
            start_y += 40
            end_y += 40

        # All down separation done
        start_x = 100 + 240
        start_y = 15 + (40 * 6) + (40 * 3) + 40
        end_x = 100 + 240 + (40 * 3)
        end_y = 15 + (40 * 6) + (40 * 3) + 40
        for _ in range(5):
            self.make_canvas.create_line(start_x, start_y, end_x, end_y, width=3)
            start_y += 40
            end_y += 40

            # Square box(Coins containers) white region make
            self.make_canvas.create_rectangle(100 + 20, 15 + 40 - 20, 100 + 40 + 60 + 40 + 60 + 20,
                                              15 + 40 + 40 + 40 + 100 - 20, width=3, fill="white")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40 - 20, 15 + 40 - 20,
                                              340 + (40 * 3) + 40 + 60 + 40 + 40 + 20 + 20,
                                              15 + 40 + 40 + 40 + 100 - 20, width=3, fill="white")
            self.make_canvas.create_rectangle(100 + 20, 340 + 80 - 20 + 15, 100 + 40 + 60 + 40 + 60 + 20,
                                              340 + 80 + 60 + 40 + 40 + 20 + 15, width=3, fill="white")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40 - 20, 340 + 80 - 20 + 15,
                                              340 + (40 * 3) + 40 + 60 + 40 + 40 + 20 + 20,
                                              340 + 80 + 60 + 40 + 40 + 20 + 15, width=3, fill="white")

            # Left up square inside box made
            self.make_canvas.create_rectangle(100 + 40, 15 + 40, 100 + 40 + 40, 15 + 40 + 40, width=3, fill="red")
            self.make_canvas.create_rectangle(100 + 40 + 60 + 60, 15 + 40, 100 + 40 + 60 + 40 + 60, 15 + 40 + 40,
                                              width=3, fill="red")
            self.make_canvas.create_rectangle(100 + 40, 15 + 40 + 100, 100 + 40 + 40, 15 + 40 + 40 + 100, width=3,
                                              fill="red")
            self.make_canvas.create_rectangle(100 + 40 + 60 + 60, 15 + 40 + 100, 100 + 40 + 60 + 40 + 60,
                                              15 + 40 + 40 + 100, width=3, fill="red")

            # Right up square inside box made
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40, 15 + 40, 340 + (40 * 3) + 40 + 40, 15 + 40 + 40,
                                              width=3, fill="#00FF00")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40 + 60 + 40 + 20, 15 + 40,
                                              340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 15 + 40 + 40, width=3,
                                              fill="#00FF00")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40, 15 + 40 + 100, 340 + (40 * 3) + 40 + 40,
                                              15 + 40 + 40 + 100, width=3, fill="#00FF00")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40 + 60 + 40 + 20, 15 + 40 + 100,
                                              340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 15 + 40 + 40 + 100, width=3,
                                              fill="#00FF00")

            # Left down square inside box made
            self.make_canvas.create_rectangle(100 + 40, 340 + 80 + 15, 100 + 40 + 40, 340 + 80 + 40 + 15, width=3,
                                              fill="#04d9ff")
            self.make_canvas.create_rectangle(100 + 40 + 60 + 40 + 20, 340 + 80 + 15, 100 + 40 + 60 + 40 + 40 + 20,
                                              340 + 80 + 40 + 15, width=3, fill="#04d9ff")
            self.make_canvas.create_rectangle(100 + 40, 340 + 80 + 60 + 40 + 15, 100 + 40 + 40,
                                              340 + 80 + 60 + 40 + 40 + 15, width=3, fill="#04d9ff")
            self.make_canvas.create_rectangle(100 + 40 + 60 + 40 + 20, 340 + 80 + 60 + 40 + 15,
                                              100 + 40 + 60 + 40 + 40 + 20, 340 + 80 + 60 + 40 + 40 + 15, width=3,
                                              fill="#04d9ff")

            # Right down square inside box made
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40, 340 + 80 + 15, 340 + (40 * 3) + 40 + 40,
                                              340 + 80 + 40 + 15, width=3, fill="yellow")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40 + 60 + 40 + 20, 340 + 80 + 15,
                                              340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 340 + 80 + 40 + 15, width=3,
                                              fill="yellow")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40, 340 + 80 + 60 + 40 + 15, 340 + (40 * 3) + 40 + 40,
                                              340 + 80 + 60 + 40 + 40 + 15, width=3, fill="yellow")
            self.make_canvas.create_rectangle(340 + (40 * 3) + 40 + 60 + 40 + 20, 340 + 80 + 60 + 40 + 15,
                                              340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 340 + 80 + 60 + 40 + 40 + 15,
                                              width=3, fill="yellow")

            # sky_blue start position
            self.make_canvas.create_rectangle(100 + 240, 340 + (40 * 5) - 5, 100 + 240 + 40, 340 + (40 * 6) - 5,
                                              fill="#04d9ff", width=3)
            # Red start position
            self.make_canvas.create_rectangle(100 + 40, 15 + (40 * 6), 100 + 40 + 40, 15 + (40 * 6) + 40, fill="red",
                                              width=3)
            # Green start position
            self.make_canvas.create_rectangle(100 + (40 * 8), 15 + 40, 100 + (40 * 9), 15 + 40 + 40, fill="#00FF00",
                                              width=3)
            # Yellow start position
            self.make_canvas.create_rectangle(100 + (40 * 6) + (40 * 3) + (40 * 4), 15 + (40 * 8),
                                              100 + (40 * 6) + (40 * 3) + (40 * 5), 15 + (40 * 9), fill="yellow",
                                              width=3)

            # tokens for the red top left box
            red_1_coin = self.make_canvas.create_oval(100 + 40, 15 + 40, 100 + 40 + 40, 15 + 40 + 40, width=3,
                                                      fill="red", outline="black")

            red_2_coin = self.make_canvas.create_oval(100 + 40 + 60 + 60, 15 + 40, 100 + 40 + 60 + 60 + 40,
                                                      15 + 40 + 40, width=3, fill="red", outline="black")
            red_3_coin = self.make_canvas.create_oval(100 + 40 + 60 + 60, 15 + 40 + 100, 100 + 40 + 60 + 60 + 40,
                                                      15 + 40 + 40 + 100, width=3, fill="red", outline="black")
            red_4_coin = self.make_canvas.create_oval(100 + 40, 15 + 40 + 100, 100 + 40 + 40, 15 + 40 + 40 + 100,
                                                      width=3, fill="red", outline="black")

            self.made_red_coin.append(red_1_coin)
            self.made_red_coin.append(red_2_coin)
            self.made_red_coin.append(red_3_coin)
            self.made_red_coin.append(red_4_coin)

            # Make coin under number label for red left top block
            red_1_label = Label(self.make_canvas, text="1", font=("Arial", 15, "bold"), bg="red", fg="black")
            red_1_label.place(x=100 + 40 + 10, y=15 + 40 + 5)
            red_2_label = Label(self.make_canvas, text="2", font=("Arial", 15, "bold"), bg="red", fg="black")
            red_2_label.place(x=100 + 40 + 60 + 60 + 10, y=15 + 40 + 5)
            red_3_label = Label(self.make_canvas, text="3", font=("Arial", 15, "bold"), bg="red", fg="black")
            red_3_label.place(x=100 + 40 + 60 + 60 + 10, y=15 + 40 + 100 + 5)
            red_4_label = Label(self.make_canvas, text="4", font=("Arial", 15, "bold"), bg="red", fg="black")
            red_4_label.place(x=100 + 40 + 10, y=15 + 40 + 100 + 5)
            self.red_number_label.append(red_1_label)
            self.red_number_label.append(red_2_label)
            self.red_number_label.append(red_3_label)
            self.red_number_label.append(red_4_label)

            # tokens for the green top right box
            green_1_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40, 15 + 40, 340 + (40 * 3) + 40 + 40,
                                                        15 + 40 + 40, width=3, fill="#00FF00", outline="black")
            green_2_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40 + 60 + 40 + 20, 15 + 40,
                                                        340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 15 + 40 + 40, width=3,
                                                        fill="#00FF00", outline="black")
            green_3_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40 + 60 + 40 + 20, 15 + 40 + 100,
                                                        340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 15 + 40 + 40 + 100,
                                                        width=3, fill="#00FF00", outline="black")
            green_4_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40, 15 + 40 + 100, 340 + (40 * 3) + 40 + 40,
                                                        15 + 40 + 40 + 100, width=3, fill="#00FF00", outline="black")
            self.made_green_coin.append(green_1_coin)
            self.made_green_coin.append(green_2_coin)
            self.made_green_coin.append(green_3_coin)
            self.made_green_coin.append(green_4_coin)

            # Make coin under number label for green top right box
            green_1_label = Label(self.make_canvas, text="1", font=("Arial", 15, "bold"), bg="#00FF00", fg="black")
            green_1_label.place(x=340 + (40 * 3) + 40 + 10, y=15 + 40 + 5)
            green_2_label = Label(self.make_canvas, text="2", font=("Arial", 15, "bold"), bg="#00FF00", fg="black")
            green_2_label.place(x=340 + (40 * 3) + 40 + 40 + 60 + 30, y=15 + 40 + 5)
            green_3_label = Label(self.make_canvas, text="3", font=("Arial", 15, "bold"), bg="#00FF00", fg="black")
            green_3_label.place(x=340 + (40 * 3) + 40 + 40 + 60 + 30, y=15 + 40 + 100 + 5)
            green_4_label = Label(self.make_canvas, text="4", font=("Arial", 15, "bold"), bg="#00FF00", fg="black")
            green_4_label.place(x=340 + (40 * 3) + 40 + 10, y=15 + 40 + 100 + 5)
            self.green_number_label.append(green_1_label)
            self.green_number_label.append(green_2_label)
            self.green_number_label.append(green_3_label)
            self.green_number_label.append(green_4_label)

            # tokens for the bottom left blue box
            blue_1_coin = self.make_canvas.create_oval(100 + 40, 340 + 80 + 15, 100 + 40 + 40, 340 + 80 + 40 + 15,
                                                       width=3, fill="#04d9ff", outline="black")
            blue_2_coin = self.make_canvas.create_oval(100 + 40 + 60 + 40 + 20, 340 + 80 + 15,
                                                       100 + 40 + 60 + 40 + 40 + 20, 340 + 80 + 40 + 15, width=3,
                                                       fill="#04d9ff", outline="black")
            blue_3_coin = self.make_canvas.create_oval(100 + 40 + 60 + 40 + 20, 340 + 80 + 60 + 40 + 15,
                                                       100 + 40 + 60 + 40 + 40 + 20, 340 + 80 + 60 + 40 + 40 + 15,
                                                       width=3, fill="#04d9ff", outline="black")
            blue_4_coin = self.make_canvas.create_oval(100 + 40, 340 + 80 + 60 + 40 + 15, 100 + 40 + 40,
                                                       340 + 80 + 60 + 40 + 40 + 15, width=3, fill="#04d9ff",
                                                       outline="black")
            self.made_blue_coin.append(blue_1_coin)
            self.made_blue_coin.append(blue_2_coin)
            self.made_blue_coin.append(blue_3_coin)
            self.made_blue_coin.append(blue_4_coin)

            # Make coin under number label for sky_blue left down block
            sky_blue_1_label = Label(self.make_canvas, text="1", font=("Arial", 15, "bold"), bg="#04d9ff", fg="black")
            sky_blue_1_label.place(x=100 + 40 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 10)
            sky_blue_2_label = Label(self.make_canvas, text="2", font=("Arial", 15, "bold"), bg="#04d9ff", fg="black")
            sky_blue_2_label.place(x=100 + 40 + 60 + 60 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 10)
            sky_blue_3_label = Label(self.make_canvas, text="3", font=("Arial", 15, "bold"), bg="#04d9ff", fg="black")
            sky_blue_3_label.place(x=100 + 40 + 60 + 60 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 60 + 40 + 10)
            sky_blue_4_label = Label(self.make_canvas, text="4", font=("Arial", 15, "bold"), bg="#04d9ff", fg="black")
            sky_blue_4_label.place(x=100 + 40 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 60 + 40 + 10)
            self.blue_number_label.append(sky_blue_1_label)
            self.blue_number_label.append(sky_blue_2_label)
            self.blue_number_label.append(sky_blue_3_label)
            self.blue_number_label.append(sky_blue_4_label)

            # tokens for the right bottom blue box
            yellow_1_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40, 340 + 80 + 15, 340 + (40 * 3) + 40 + 40,
                                                         340 + 80 + 40 + 15, width=3, fill="yellow", outline="black")
            yellow_2_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40 + 60 + 40 + 20, 340 + 80 + 15,
                                                         340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 340 + 80 + 40 + 15,
                                                         width=3, fill="yellow", outline="black")
            yellow_3_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40 + 60 + 40 + 20, 340 + 80 + 60 + 40 + 15,
                                                         340 + (40 * 3) + 40 + 60 + 40 + 40 + 20,
                                                         340 + 80 + 60 + 40 + 40 + 15, width=3, fill="yellow",
                                                         outline="black")
            yellow_4_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40, 340 + 80 + 60 + 40 + 15,
                                                         340 + (40 * 3) + 40 + 40, 340 + 80 + 60 + 40 + 40 + 15,
                                                         width=3, fill="yellow", outline="black")
            self.made_yellow_coin.append(yellow_1_coin)
            self.made_yellow_coin.append(yellow_2_coin)
            self.made_yellow_coin.append(yellow_3_coin)
            self.made_yellow_coin.append(yellow_4_coin)

            yellow_1_label = Label(self.make_canvas, text="1", font=("Arial", 15, "bold"), bg="yellow", fg="black")
            yellow_1_label.place(x=340 + (40 * 3) + 40 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 10)
            yellow_2_label = Label(self.make_canvas, text="2", font=("Arial", 15, "bold"), bg="yellow", fg="black")
            yellow_2_label.place(x=340 + (40 * 3) + 40 + 40 + 60 + 30, y=30 + (40 * 6) + (40 * 3) + 40 + 10)
            yellow_3_label = Label(self.make_canvas, text="3", font=("Arial", 15, "bold"), bg="yellow", fg="black")
            yellow_3_label.place(x=340 + (40 * 3) + 40 + 40 + 60 + 30, y=30 + (40 * 6) + (40 * 3) + 40 + 100 + 10)
            yellow_4_label = Label(self.make_canvas, text="4", font=("Arial", 15, "bold"), bg="yellow", fg="black")
            yellow_4_label.place(x=340 + (40 * 3) + 40 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 100 + 10)
            self.yellow_number_label.append(yellow_1_label)
            self.yellow_number_label.append(yellow_2_label)
            self.yellow_number_label.append(yellow_3_label)
            self.yellow_number_label.append(yellow_4_label)

            # triangle in middle
            self.make_canvas.create_polygon(100 + 240, 15 + 240, 100 + 240 + 60, 15 + 240 + 60, 100 + 240,
                                            15 + 240 + (40 * 3), width=3, fill="red", outline="black")
            self.make_canvas.create_polygon(100 + 240 + (40 * 3), 15 + 240, 100 + 240 + 60, 15 + 240 + 60,
                                            100 + 240 + (40 * 3), 15 + 240 + (40 * 3), width=3, fill="yellow",
                                            outline="black")
            self.make_canvas.create_polygon(100 + 240, 15 + 240, 100 + 240 + 60, 15 + 240 + 60, 100 + 240 + (40 * 3),
                                            15 + 240, width=3, fill="#00FF00", outline="black")
            self.make_canvas.create_polygon(100 + 240, 15 + 240 + (40 * 3), 100 + 240 + 60, 15 + 240 + 60,
                                            100 + 240 + (40 * 3), 15 + 240 + (40 * 3), width=3, fill="#04d9ff",
                                            outline="black")

            # Make star safe zone
            """
                                                  A
                                               L  *  B
                                       K *  *  *     *  *  * C
                                            *           *
                                            J *        * D
                                           *            *
                                      I*  *  *      *  *  * E
                                             H   *   F
                                                 G
            """
            # Right star
            common_x = 340 + (40 * 6) + 20
            common_y = 15 + 240 + 2
            #              A                     B                        C                         D                        E                              F                    G                                  H                        I                            J                            K                         L
            coord = [common_x, common_y, common_x + 5, common_y + 15, common_x + 15, common_y + 15, common_x + 8,
                     common_y + 20, common_x + 15, common_y + 25, common_x + 5, common_y + 25, common_x,
                     common_y + 25 + 10, common_x - 5, common_y + 25, common_x - 16, common_y + 25, common_x - 8,
                     common_y + 15 + 5, common_x - 15, common_y + 15, common_x - 5, common_y + 15]
            self.make_canvas.create_polygon(coord, width=3, fill="orange")

            # Up star
            common_x = 100 + 240 + 2 + 18
            common_y = 15 + (40 * 2) + 2
            #              A                              B                                   C                             D                                E                                        F                       G                                          H                               I                            J                                      K                                   L
            coord = [common_x, common_y, common_x + 5, common_y + 15, common_x + 15, common_y + 15, common_x + 8,
                     common_y + 20, common_x + 15, common_y + 25, common_x + 5, common_y + 25, common_x,
                     common_y + 25 + 10, common_x - 5, common_y + 25, common_x - 16, common_y + 25, common_x - 8,
                     common_y + 15 + 5, common_x - 15, common_y + 15, common_x - 5, common_y + 15]
            self.make_canvas.create_polygon(coord, width=3, fill="orange")

            # Left star
            common_x = 100 + (40 * 2) + 2 + 18
            common_y = 15 + 240 + (40 * 2) + 2
            #                  A                     B                                   C                            D                                 E                                F                           G                                  H                                    I                                 J                                    K                                L
            coord = [common_x, common_y, common_x + 5, common_y + 15, common_x + 15, common_y + 15, common_x + 8,
                     common_y + 20, common_x + 15, common_y + 25, common_x + 5, common_y + 25, common_x,
                     common_y + 25 + 10, common_x - 5, common_y + 25, common_x - 16, common_y + 25, common_x - 8,
                     common_y + 15 + 5, common_x - 15, common_y + 15, common_x - 5, common_y + 15]
            self.make_canvas.create_polygon(coord, width=3, fill="orange")

            # Down star
            common_x = 100 + 240 + (40 * 2) + 2 + 18
            common_y = 15 + (40 * 6) + (40 * 3) + (40 * 3) + 2
            #              A                         B                             C                                       D                        E                                       F                                   G                                     H                                  I                                  J                                  K                                  L
            coord = [common_x, common_y, common_x + 5, common_y + 15, common_x + 15, common_y + 15, common_x + 8,
                     common_y + 20, common_x + 15, common_y + 25, common_x + 5, common_y + 25, common_x,
                     common_y + 25 + 10, common_x - 5, common_y + 25, common_x - 16, common_y + 25, common_x - 8,
                     common_y + 15 + 5, common_x - 15, common_y + 15, common_x - 5, common_y + 15]
            self.make_canvas.create_polygon(coord, width=3, fill="orange")






            # Total number of players: Control take at first
    def take_initial_control(self):
                for i in range(4):
                    self.block_value_predict[i][1]['state'] = DISABLED

                # Making another window to control take
                top = Toplevel()
                top.geometry("600x150")
                top.maxsize(600, 150)
                top.minsize(600, 150)
                top.config(bg="orange")
                top.iconbitmap("C:/Users/Arya/OneDrive/Desktop/Ludo-Game/Images/LUDO.ico")

                head = Label(top, text="-:Total number of players:- ", font=("Arial", 25, "bold", "italic"),
                             bg="orange", fg="chocolate")
                head.place(x=70, y=30)
                take_entry = Entry(top, font=("Arial", 18, "bold", "italic"), relief=SUNKEN, bd=7, width=12)
                take_entry.place(x=150, y=80)
                take_entry.focus()

                def filtering():  # Total player input value filtering
                    response_take = self.input_filtering(take_entry.get())
                    if response_take is True and int(take_entry.get()) > 1:
                        for player_index in range(int(take_entry.get())):
                            self.total_people_play.append(player_index)
                        print(self.total_people_play)
                        self.make_command()
                        top.destroy()
                    else:
                        messagebox.showerror("Input Error", "Please input number of players between 2 and 4")

                submit_btn = Button(top, text="Submit", bg="black", fg="#00FF00", font=("Arial", 13, "bold"),
                                    relief=RAISED, bd=8, command=filtering)
                submit_btn.place(x=350, y=80)
                top.mainloop()
    def make_prediction(self,color_indicator):
        try:
            if color_indicator == "red":
                block_value_predict = self.block_value_predict[0]
                permanent_block_number = self.move_red_counter = randint(1, 6)

            elif color_indicator == "sky_blue":
                block_value_predict = self.block_value_predict[1]
                permanent_block_number = self.move_sky_blue_counter = randint(1, 6)

            elif color_indicator == "yellow":
                block_value_predict = self.block_value_predict[2]
                permanent_block_number = self.move_yellow_counter = randint(1, 6)

            else:
                block_value_predict = self.block_value_predict[3]
                permanent_block_number = self.move_green_counter = randint(1, 6)


            block_value_predict[1]['state'] = DISABLED

            # Illusion of coin floating
            temp_counter = 15
            while temp_counter>0:
                move_temp_counter = randint(1, 6)
                block_value_predict[0]['image'] = self.block_number_side[move_temp_counter - 1]
                self.root.update()
                time.sleep(0.1)
                temp_counter-=1

            print("Prediction result: ", permanent_block_number)

            # Permanent predicted value containing image set
            block_value_predict[0]['image'] = self.block_number_side[permanent_block_number-1]
            self.instructional_btn_customization_based_on_current_situation(color_indicator,permanent_block_number,block_value_predict)
        except:
            print("Force stop error")

    def instructional_btn_customization_based_on_current_situation(self,color_indicator,permanent_block_number,block_value_predict):
        if color_indicator == "red":
            temp_coin_position = self.red_coin_position
        elif color_indicator == "green":
            temp_coin_position = self.green_coin_position
        elif color_indicator == "yellow":
            temp_coin_position = self.yellow_coin_position
        else:
            temp_coin_position = self.sky_blue_coin_position

        all_in = 1
        for i in range(4):
            if temp_coin_position[i] == -1:
                all_in = 1
            else:
                all_in = 0
                break

        if  permanent_block_number == 6:
            self.six_counter += 1
        else:
            self.six_counter = 0

        if ((all_in == 1 and permanent_block_number == 6) or (all_in==0)) and self.six_counter<3:
            permission = 1
            if color_indicator == "red":
                temp = self.red_coord_store
            elif color_indicator == "green":
                temp = self.green_coord_store
            elif color_indicator == "yellow":
                temp = self.yellow_coord_store
            else:
                temp = self.sky_blue_coord_store

            if  permanent_block_number<6:
                if self.six_with_overlap == 1:
                    self.time_for-=1
                    self.six_with_overlap=0
                for i in range(4):
                    if  temp[i] == -1:
                        permission=0
                    elif temp[i]>100:
                        if  temp[i]+permanent_block_number<=106:
                            permission=1
                            break
                        else:
                            permission=0
                    else:
                        permission=1
                        break
            else:
                for i in range(4):
                    if  temp[i]>100:
                        if  temp[i] + permanent_block_number <= 106:
                            permission = 1
                            break
                        else:
                            permission = 0
                    else:
                        permission = 1
                        break
            if permission == 0:
                self.make_command()
            else:
                block_value_predict[3]['state'] = NORMAL# Give btn activation
                block_value_predict[1]['state'] = DISABLED# Predict btn deactivation

        else:
            block_value_predict[1]['state'] = NORMAL# Predict btn activation
            if self.six_with_overlap == 1:
                self.time_for -= 1
                self.six_with_overlap = 0
            self.make_command()

        if  permanent_block_number == 6 and self.six_counter<3 and block_value_predict[3]['state'] == NORMAL:
            self.time_for-=1
        else:
            self.six_counter=0

    # Player Scope controller
    def make_command(self):
        if  self.time_for == -1:
            pass
        else:
            self.block_value_predict[self.total_people_play[self.time_for]][1]['state'] = DISABLED
        if  self.time_for == len(self.total_people_play)-1:
            self.time_for = -1

        self.time_for+=1
        self.block_value_predict[self.total_people_play[self.time_for]][1]['state'] = NORMAL


    def instruction_btn_red(self):
        block_predict_red = Label(self.make_canvas,image=self.block_number_side[0])
        block_predict_red.place(x=45,y=15)
        predict_red = Button(self.make_canvas, bg="black", fg="#00FF00", relief=RAISED, bd=5, text="Predict", font=("Arial", 8, "bold"), command=lambda: self.make_prediction("red"))
        predict_red.place(x=37, y=15 + 40)
        entry_take_red = Entry(self.make_canvas,bg="white",fg="blue",font=("Arial",25,"bold","italic"),width=2,relief=SUNKEN,bd=5)
        entry_take_red.place(x=40,y=15+80)
        final_move = Button(self.make_canvas,bg="black",fg="#00FF00",relief=RAISED,bd=5,text="Give",font=("Arial",8,"bold"),command=lambda: self.main_controller("red",entry_take_red.get()),state=DISABLED)
        final_move.place(x=42,y=15+140)
        Label(self.make_canvas,text="Player 1",bg="#4d4dff",fg="gold",font=("Arial",15,"bold")).place(x=15,y=15+140+40)
        self.store_instructional_btn(block_predict_red,predict_red,entry_take_red,final_move)

    def instruction_btn_sky_blue(self):
        block_predict_sky_blue = Label(self.make_canvas, image=self.block_number_side[0])
        block_predict_sky_blue.place(x=45, y=15+(40*6+40*3)+10)
        predict_sky_blue = Button(self.make_canvas, bg="black", fg="#00FF00", relief=RAISED, bd=5, text="Predict",font=("Arial", 8, "bold"), command=lambda: self.make_prediction("sky_blue"))
        predict_sky_blue.place(x=37, y=15+(40*6+40*3)+40 + 10)
        entry_take_sky_blue = Entry(self.make_canvas, bg="white", fg="blue", font=("Arial", 25, "bold", "italic"), width=2,relief=SUNKEN, bd=5)
        entry_take_sky_blue.place(x=40, y=15+(40*6+40*3)+40 + 50)
        final_move = Button(self.make_canvas, bg="black", fg="#00FF00", relief=RAISED, bd=5, text="Give", font=("Arial", 8, "bold"),command=lambda: self.main_controller("sky_blue",entry_take_sky_blue.get()),state=DISABLED)
        final_move.place(x=42, y=15+(40*6+40*3)+40 + 110)
        Label(self.make_canvas, text="Player 2", bg="#4d4dff", fg="gold", font=("Arial", 15, "bold")).place(x=15,y=15+(40*6+40*3)+40 + 110+ 40)
        self.store_instructional_btn(block_predict_sky_blue, predict_sky_blue, entry_take_sky_blue, final_move)

    def instruction_btn_yellow(self):
        block_predict_yellow = Label(self.make_canvas, image=self.block_number_side[0])
        block_predict_yellow.place(x=100 + (40 * 6 + 40 * 3 + 40 * 6 + 10)+10, y=15 + (40 * 6 + 40 * 3) + 10)
        predict_yellow = Button(self.make_canvas, bg="black", fg="#00FF00", relief=RAISED, bd=5, text="Predict",font=("Arial", 8, "bold"), command=lambda: self.make_prediction("yellow"))
        predict_yellow.place(x=100 + (40 * 6 + 40 * 3 + 40 * 6 + 2)+10, y=15 + (40 * 6 + 40 * 3) + 40 + 10)
        entry_take_yellow = Entry(self.make_canvas, bg="white", fg="blue", font=("Arial", 25, "bold", "italic"),width=2, relief=SUNKEN, bd=5)
        entry_take_yellow.place(x=100 + (40 * 6 + 40 * 3 + 40 * 6 + 2)+13, y=15 + (40 * 6 + 40 * 3) + 40 + 50)
        final_move = Button(self.make_canvas, bg="black", fg="#00FF00", relief=RAISED, bd=5, text="Give",font=("Arial", 8, "bold"),command=lambda: self.main_controller("yellow",entry_take_yellow.get()),state=DISABLED)
        final_move.place(x=100 + (40 * 6 + 40 * 3 + 40 * 6 + 2)+17, y=15 + (40 * 6 + 40 * 3) + 40 + 110)
        Label(self.make_canvas, text="Player 3", bg="#4d4dff", fg="gold", font=("Arial", 15, "bold")).place(x=100 + (40 * 6 + 40 * 3 + 40 * 6 + 3),y=15 + (40 * 6 + 40 * 3) + 40 + 110 + 40)
        self.store_instructional_btn(block_predict_yellow, predict_yellow, entry_take_yellow, final_move)

    def instruction_btn_green(self):
        block_predict_green = Label(self.make_canvas, image=self.block_number_side[0])
        block_predict_green.place(x=100+(40*6+40*3+40*6+10)+10, y=15)
        predict_green = Button(self.make_canvas, bg="black", fg="#00FF00", relief=RAISED, bd=5, text="Predict", font=("Arial", 8, "bold"), command=lambda: self.make_prediction("green"))
        predict_green.place(x=100+(40*6+40*3+40*6+2)+10, y=15 + 40)
        entry_take_green = Entry(self.make_canvas, bg="white", fg="blue", font=("Arial", 25, "bold", "italic"), width=2, relief=SUNKEN, bd=5)
        entry_take_green.place(x=100+(40*6+40*3+40*6+2)+13, y=15 + 80)
        final_move = Button(self.make_canvas, bg="black", fg="#00FF00", relief=RAISED, bd=5, text="Give",font=("Arial", 8, "bold"),command=lambda: self.main_controller("green",entry_take_green.get()),state=DISABLED)
        final_move.place(x=100+(40*6+40*3+40*6+2)+17, y=15 + 140)
        Label(self.make_canvas, text="Player 4", bg="#4d4dff", fg="gold", font=("Arial", 15, "bold")).place(x=100+(40*6+40*3+40*6+3), y=15 + 140+40)
        self.store_instructional_btn(block_predict_green, predict_green, entry_take_green, final_move)


    def store_instructional_btn(self, block_indicator, predictor, entry_controller, give_finally):
        temp = []
        temp.append(block_indicator)
        temp.append(predictor)
        temp.append(entry_controller)
        temp.append(give_finally)
        self.block_value_predict.append(temp)

        # self.block_value_predict[0] = red instruction information
        # self.block_value_predict[1] = sky_blue instruction information
        # self.block_value_predict[2] = yellow instruction information
        # self.block_value_predict[3] = green instruction information

        # self.block_value_predict[something][1] = Predict btn
        # self.block_value_predict[something][3] = Give btn


    def red_circle_start_position(self, coin_number):
        self.make_canvas.delete(self.made_red_coin[int(coin_number)-1])
        self.made_red_coin[int(coin_number)-1] = self.make_canvas.create_oval(100 + 40, 15+(40*6), 100 +40 + 40, 15+(40*6)+40, fill="red", width=3, outline="black")

        self.red_number_label[int(coin_number)-1].place_forget()
        red_start_label_x = 100 + 40 + 10
        red_start_label_y = 15 + (40 * 6) + 5
        self.red_number_label[int(coin_number)-1].place(x=red_start_label_x, y=red_start_label_y)

        self.red_coin_position[int(coin_number)-1] = 1
        self.root.update()
        time.sleep(0.2)


    def green_circle_start_position(self,coin_number):
        self.make_canvas.delete(self.made_green_coin[int(coin_number)-1])
        self.made_green_coin[int(coin_number)-1] = self.make_canvas.create_oval(100 + (40*8), 15 + 40, 100 +(40*9), 15 + 40+ 40, fill="#00FF00", width=3)

        self.green_number_label[int(coin_number)-1].place_forget()
        green_start_label_x = 100 + (40*8) + 10
        green_start_label_y = 15 + 40 + 5
        self.green_number_label[int(coin_number)-1].place(x=green_start_label_x, y=green_start_label_y)

        self.green_coin_position[int(coin_number)-1] = 14
        self.root.update()
        time.sleep(0.2)


    def yellow_circle_start_position(self,coin_number):
        self.make_canvas.delete(self.made_yellow_coin[int(coin_number)-1])
        self.made_yellow_coin[int(coin_number)-1] = self.make_canvas.create_oval(100 + (40 * 6)+(40*3)+(40*4), 15 + (40*8), 100 + (40 * 6)+(40*3)+(40*5), 15 + (40*9), fill="yellow", width=3)

        self.yellow_number_label[int(coin_number)-1].place_forget()
        yellow_start_label_x = 100 + (40 * 6)+(40*3)+(40*4) + 10
        yellow_start_label_y = 15 + (40*8) + 5
        self.yellow_number_label[int(coin_number) - 1].place(x=yellow_start_label_x, y=yellow_start_label_y)

        self.yellow_coin_position[int(coin_number) - 1] = 27
        self.root.update()
        time.sleep(0.2)


    def sky_blue_circle_start_position(self,coin_number):
        self.make_canvas.delete(self.made_sky_blue_coin[int(coin_number)-1])
        self.made_sky_blue_coin[int(coin_number)-1] = self.make_canvas.create_oval(100+240,340+(40*5)-5,100+240+40,340+(40*6)-5,fill="#04d9ff",width=3)

        self.sky_blue_number_label[int(coin_number)-1].place_forget()
        sky_blue_start_label_x = 100+240 + 10
        sky_blue_start_label_y = 340+(40*5)-5 + 5
        self.sky_blue_number_label[int(coin_number) - 1].place(x=sky_blue_start_label_x, y=sky_blue_start_label_y)

        self.sky_blue_coin_position[int(coin_number) - 1] = 40
        self.root.update()
        time.sleep(0.2)


    def main_controller(self, color_coin, coin_number):
        processing_result = self.input_filtering(coin_number)# Value filtering
        if processing_result is True:
            pass
        else:
            messagebox.showerror("Wrong input number","Please input the coin number between 1 to 4")
            return

        if  color_coin == "red":
            self.block_value_predict[0][3]['state'] = DISABLED

            if self.move_red_counter == 106:
                messagebox.showwarning("Destination reached","Reached at the destination")

            elif self.red_coin_position[int(coin_number)-1] == -1 and self.move_red_counter == 6:
                self.red_circle_start_position(coin_number)
                self.red_coord_store[int(coin_number) - 1] = 1

            elif self.red_coin_position[int(coin_number)-1] > -1:
                take_coord = self.make_canvas.coords(self.made_red_coin[int(coin_number)-1])
                red_start_label_x = take_coord[0] + 10
                red_start_label_y = take_coord[1] + 5
                self.red_number_label[int(coin_number) - 1].place(x=red_start_label_x, y=red_start_label_y)

                if self.red_coin_position[int(coin_number)-1]+self.move_red_counter<=106:
                   self.red_coin_position[int(coin_number)-1] = self.motion_of_coin(self.red_coin_position[int(coin_number) - 1],self.made_red_coin[int(coin_number)-1],self.red_number_label[int(coin_number)-1],red_start_label_x,red_start_label_y,"red",self.move_red_counter)
                else:
                   messagebox.showerror("Not possible","Sorry, not permitted")
                   self.block_value_predict[0][3]['state'] = NORMAL
                   return

                if  self.red_coin_position[int(coin_number)-1]==22 or self.red_coin_position[int(coin_number)-1]==9 or self.red_coin_position[int(coin_number)-1]==48 or self.red_coin_position[int(coin_number)-1]==35 or self.red_coin_position[int(coin_number)-1]==14 or self.red_coin_position[int(coin_number)-1]==27 or self.red_coin_position[int(coin_number)-1]==40:
                    pass
                else:
                    if self.red_coin_position[int(coin_number) - 1] < 100:
                        self.coord_overlap(self.red_coin_position[int(coin_number)-1],color_coin, self.move_red_counter)

                self.red_coord_store[int(coin_number)-1] = self.red_coin_position[int(coin_number)-1]

            else:
                messagebox.showerror("Wrong choice","Sorry, Your coin in not permitted to travel")
                self.block_value_predict[0][3]['state'] = NORMAL
                return

            self.block_value_predict[0][1]['state'] = NORMAL


        elif color_coin == "green":
            self.block_value_predict[3][3]['state'] = DISABLED

            if self.move_green_counter == 106:
                messagebox.showwarning("Destination reached","Reached at the destination")

            elif self.green_coin_position[int(coin_number) - 1] == -1 and self.move_green_counter == 6:
                self.green_circle_start_position(coin_number)
                self.green_coord_store[int(coin_number) - 1] = 14

            elif self.green_coin_position[int(coin_number) - 1] > -1:
                take_coord = self.make_canvas.coords(self.made_green_coin[int(coin_number) - 1])
                green_start_label_x = take_coord[0] + 10
                green_start_label_y = take_coord[1] + 5
                self.green_number_label[int(coin_number) - 1].place(x=green_start_label_x, y=green_start_label_y)


                if  self.green_coin_position[int(coin_number) - 1] + self.move_green_counter <= 106:
                    self.green_coin_position[int(coin_number) - 1] = self.motion_of_coin(self.green_coin_position[int(coin_number) - 1], self.made_green_coin[int(coin_number) - 1], self.green_number_label[int(coin_number) - 1], green_start_label_x, green_start_label_y, "green", self.move_green_counter)
                else:
                   messagebox.showerror("Not possible","No path available")
                   self.block_value_predict[3][3]['state'] = NORMAL
                   return


                if  self.green_coin_position[int(coin_number)-1]==22 or self.green_coin_position[int(coin_number)-1]==9 or self.green_coin_position[int(coin_number)-1]==48 or self.green_coin_position[int(coin_number)-1]==35 or self.green_coin_position[int(coin_number)-1]==1 or self.green_coin_position[int(coin_number)-1]==27 or self.green_coin_position[int(coin_number)-1]==40:
                    pass
                else:
                    if self.green_coin_position[int(coin_number) - 1] < 100:
                        self.coord_overlap(self.green_coin_position[int(coin_number) - 1],color_coin, self.move_green_counter)

                self.green_coord_store[int(coin_number) - 1] = self.green_coin_position[int(coin_number) - 1]

            else:
                messagebox.showerror("Wrong choice", "Sorry, Your coin in not permitted to travel")
                self.block_value_predict[3][3]['state'] = NORMAL
                return

            self.block_value_predict[3][1]['state'] = NORMAL


        elif color_coin == "yellow":
            self.block_value_predict[2][3]['state'] = DISABLED

            if self.move_yellow_counter == 106:
                messagebox.showwarning("Destination reached","Reached at the destination")

            elif self.yellow_coin_position[int(coin_number) - 1] == -1 and self.move_yellow_counter == 6:
                self.yellow_circle_start_position(coin_number)
                self.yellow_coord_store[int(coin_number) - 1] = 27

            elif self.yellow_coin_position[int(coin_number) - 1] > -1:
                take_coord = self.make_canvas.coords(self.made_yellow_coin[int(coin_number) - 1])
                yellow_start_label_x = take_coord[0] + 10
                yellow_start_label_y = take_coord[1] + 5
                self.yellow_number_label[int(coin_number) - 1].place(x=yellow_start_label_x, y=yellow_start_label_y)

                if  self.yellow_coin_position[int(coin_number) - 1] + self.move_yellow_counter <= 106:
                    self.yellow_coin_position[int(coin_number) - 1] = self.motion_of_coin(self.yellow_coin_position[int(coin_number) - 1], self.made_yellow_coin[int(coin_number) - 1], self.yellow_number_label[int(coin_number) - 1], yellow_start_label_x, yellow_start_label_y, "yellow", self.move_yellow_counter)
                else:
                   messagebox.showerror("Not possible","No path available")
                   self.block_value_predict[2][3]['state'] = NORMAL
                   return

                if  self.yellow_coin_position[int(coin_number)-1]==22 or self.yellow_coin_position[int(coin_number)-1]==9 or self.yellow_coin_position[int(coin_number)-1]==48 or self.yellow_coin_position[int(coin_number)-1]==35 or self.yellow_coin_position[int(coin_number)-1]==1 or self.yellow_coin_position[int(coin_number)-1]==14 or self.yellow_coin_position[int(coin_number)-1]==40:
                    pass
                else:
                    if self.yellow_coin_position[int(coin_number) - 1] < 100:
                        self.coord_overlap(self.yellow_coin_position[int(coin_number) - 1],color_coin, self.move_yellow_counter)

                self.yellow_coord_store[int(coin_number) - 1] = self.yellow_coin_position[int(coin_number) - 1]

            else:
                messagebox.showerror("Wrong choice", "Sorry, Your coin in not permitted to travel")
                self.block_value_predict[2][3]['state'] = NORMAL
                return

            self.block_value_predict[2][1]['state'] = NORMAL


        elif color_coin == "sky_blue":
            self.block_value_predict[1][3]['state'] = DISABLED
            if self.move_red_counter == 106:
                messagebox.showwarning("Destination reached","Reached at the destination")

            elif self.sky_blue_coin_position[int(coin_number) - 1] == -1 and self.move_sky_blue_counter == 6:
                self.sky_blue_circle_start_position(coin_number)
                self.sky_blue_coord_store[int(coin_number) - 1] = 40

            elif self.sky_blue_coin_position[int(coin_number) - 1] > -1:
                take_coord = self.make_canvas.coords(self.made_sky_blue_coin[int(coin_number) - 1])
                sky_blue_start_label_x = take_coord[0] + 10
                sky_blue_start_label_y = take_coord[1] + 5
                self.sky_blue_number_label[int(coin_number) - 1].place(x=sky_blue_start_label_x, y=sky_blue_start_label_y)

                if  self.sky_blue_coin_position[int(coin_number) - 1] + self.move_sky_blue_counter <= 106:
                    self.sky_blue_coin_position[int(coin_number) - 1] = self.motion_of_coin(self.sky_blue_coin_position[int(coin_number) - 1], self.made_sky_blue_coin[int(coin_number) - 1], self.sky_blue_number_label[int(coin_number) - 1], sky_blue_start_label_x, sky_blue_start_label_y, "sky_blue", self.move_sky_blue_counter)
                else:
                   messagebox.showerror("Not possible","No path available")
                   self.block_value_predict[1][3]['state'] = NORMAL
                   return

                if  self.sky_blue_coin_position[int(coin_number)-1]==22 or self.sky_blue_coin_position[int(coin_number)-1]==9 or self.sky_blue_coin_position[int(coin_number)-1]==48 or self.sky_blue_coin_position[int(coin_number)-1]==35 or self.sky_blue_coin_position[int(coin_number)-1]==1 or self.sky_blue_coin_position[int(coin_number)-1]==14 or self.sky_blue_coin_position[int(coin_number)-1]==27:
                    pass
                else:
                    if self.sky_blue_coin_position[int(coin_number) - 1] < 100:
                        self.coord_overlap(self.sky_blue_coin_position[int(coin_number) - 1],color_coin, self.move_sky_blue_counter)

                self.sky_blue_coord_store[int(coin_number) - 1] = self.sky_blue_coin_position[int(coin_number) - 1]

            else:
                messagebox.showerror("Wrong choice", "Sorry, Your coin in not permitted to travel")
                self.block_value_predict[1][3]['state'] = NORMAL
                return

            self.block_value_predict[1][1]['state'] = NORMAL

        print(self.red_coord_store)
        print(self.green_coord_store)
        print(self.yellow_coord_store)
        print(self.sky_blue_coord_store)

        permission_granted_to_proceed = True

        if  color_coin == "red" and self.red_coin_position[int(coin_number)-1] == 106:
            permission_granted_to_proceed = self.check_winner_and_runner(color_coin)
        elif  color_coin == "green" and self.green_coin_position[int(coin_number)-1] == 106:
            permission_granted_to_proceed = self.check_winner_and_runner(color_coin)
        elif  color_coin == "yellow" and self.yellow_coin_position[int(coin_number)-1] == 106:
            permission_granted_to_proceed = self.check_winner_and_runner(color_coin)
        elif  color_coin == "sky_blue" and self.sky_blue_coin_position[int(coin_number)-1] == 106:
            permission_granted_to_proceed = self.check_winner_and_runner(color_coin)

        if permission_granted_to_proceed:# if that is False, Game is over and not proceed more
            self.make_command()

    def motion_of_coin(self,counter_coin,specific_coin,number_label,number_label_x ,number_label_y,color_coin,path_counter):
        number_label.place(x=number_label_x,y=number_label_y)
        while True:
            if path_counter == 0:
                break
            elif (counter_coin == 51 and color_coin == "red") or (counter_coin==12 and color_coin == "green") or (counter_coin == 25 and color_coin == "yellow") or (counter_coin == 38 and color_coin == "sky_blue") or counter_coin>=100:
                if counter_coin<100:
                    counter_coin=100

                counter_coin = self.under_room_traversal_control(specific_coin, number_label, number_label_x, number_label_y, path_counter, counter_coin, color_coin)

                if  counter_coin == 106:
                    messagebox.showinfo("Destination reached","Congrats! You now at the destination")
                    if path_counter == 6:
                        self.six_with_overlap = 1
                    else:
                        self.time_for -= 1
                break

            counter_coin += 1
            path_counter -=1
            number_label.place_forget()

            print(counter_coin)

            if counter_coin<=5:
                self.make_canvas.move(specific_coin, 40, 0)
                number_label_x+=40
            elif counter_coin == 6:
                self.make_canvas.move(specific_coin, 40, -40)
                number_label_x += 40
                number_label_y-=40
            elif 6< counter_coin <=11:
                self.make_canvas.move(specific_coin, 0, -40)
                number_label_y -= 40
            elif counter_coin <=13:
                self.make_canvas.move(specific_coin, 40, 0)
                number_label_x += 40
            elif counter_coin <=18:
                self.make_canvas.move(specific_coin, 0, 40)
                number_label_y += 40
            elif counter_coin == 19:
                self.make_canvas.move(specific_coin, 40, 40)
                number_label_x += 40
                number_label_y += 40
            elif counter_coin <=24:
                self.make_canvas.move(specific_coin, 40, 0)
                number_label_x += 40
            elif counter_coin <=26:
                self.make_canvas.move(specific_coin, 0, 40)
                number_label_y += 40
            elif counter_coin <=31:
                self.make_canvas.move(specific_coin, -40, 0)
                number_label_x -= 40
            elif counter_coin == 32:
                self.make_canvas.move(specific_coin, -40, 40)
                number_label_x -= 40
                number_label_y += 40
            elif counter_coin <= 37:
                self.make_canvas.move(specific_coin, 0, 40)
                number_label_y += 40
            elif counter_coin <= 39:
                self.make_canvas.move(specific_coin, -40, 0)
                number_label_x -= 40
            elif counter_coin <= 44:
                self.make_canvas.move(specific_coin, 0, -40)
                number_label_y -= 40
            elif counter_coin == 45:
                self.make_canvas.move(specific_coin, -40, -40)
                number_label_x -= 40
                number_label_y -= 40
            elif counter_coin <= 50:
                self.make_canvas.move(specific_coin, -40, 0)
                number_label_x -= 40
            elif 50< counter_coin <=52:
                self.make_canvas.move(specific_coin, 0, -40)
                number_label_y -= 40
            elif counter_coin == 53:
                self.make_canvas.move(specific_coin, 40, 0)
                number_label_x += 40
                counter_coin = 1

            number_label.place_forget()
            number_label.place(x=number_label_x, y=number_label_y)

            self.root.update()
            time.sleep(0.2)

        return counter_coin

    # For same position, previous coin deleted and set to the room
    def coord_overlap(self, counter_coin, color_coin, path_to_traverse_before_overlap):
        if  color_coin!="red":
            for take_coin_number in range(len(self.red_coord_store)):
                if  self.red_coord_store[take_coin_number] == counter_coin:
                    if path_to_traverse_before_overlap == 6:
                        self.six_with_overlap=1
                    else:
                        self.time_for-=1

                    self.make_canvas.delete(self.made_red_coin[take_coin_number])
                    self.red_number_label[take_coin_number].place_forget()
                    self.red_coin_position[take_coin_number] = -1
                    self.red_coord_store[take_coin_number] = -1

                    if take_coin_number == 0:
                       remade_coin = self.make_canvas.create_oval(100+40, 15+40, 100+40+40, 15+40+40, width=3, fill="red", outline="black")
                       self.red_number_label[take_coin_number].place(x=100 + 40 + 10, y=15 + 40 + 5)
                    elif take_coin_number == 1:
                        remade_coin = self.make_canvas.create_oval(100+40+60+60, 15 + 40, 100+40+60+60+40, 15 + 40 + 40, width=3, fill="red", outline="black")
                        self.red_number_label[take_coin_number].place(x=100 + 40 + 60 +60 + 10, y=15 + 40 + 5)
                    elif take_coin_number == 2:
                        remade_coin = self.make_canvas.create_oval(100 + 40 + 60 + 60, 15 + 40 + 100, 100 + 40 + 60 + 60 + 40, 15 + 40 + 40 + 100, width=3, fill="red", outline="black")
                        self.red_number_label[take_coin_number].place(x=100 + 40 + 60 + 60 + 10, y=15 + 40 + 100 + 5)
                    else:
                        remade_coin = self.make_canvas.create_oval(100 + 40, 15 + 40+100, 100 + 40 + 40, 15 + 40 + 40+100, width=3,fill="red", outline="black")
                        self.red_number_label[take_coin_number].place(x=100 + 40 + 10, y=15 + 40 + 100 + 5)

                    self.made_red_coin[take_coin_number]=remade_coin

        if  color_coin != "green":
            for take_coin_number in range(len(self.green_coord_store)):
                if  self.green_coord_store[take_coin_number] == counter_coin:
                    if path_to_traverse_before_overlap == 6:
                        self.six_with_overlap = 1
                    else:
                        self.time_for-=1

                    self.make_canvas.delete(self.made_green_coin[take_coin_number])
                    self.green_number_label[take_coin_number].place_forget()
                    self.green_coin_position[take_coin_number] = -1
                    self.green_coord_store[take_coin_number] = -1

                    if take_coin_number == 0:
                        remade_coin = self.make_canvas.create_oval(340+(40*3)+40, 15 + 40, 340+(40*3)+40 + 40, 15 + 40 + 40, width=3, fill="#00FF00", outline="black")
                        self.green_number_label[take_coin_number].place(x=340 + (40 * 3) + 40 + 10, y=15 + 40 + 5)
                    elif take_coin_number == 1:
                        remade_coin = self.make_canvas.create_oval(340+(40*3)+40+ 60 + 40+20, 15 + 40, 340+(40*3)+40 + 60 + 40 + 40+20, 15 + 40 + 40, width=3, fill="#00FF00", outline="black")
                        self.green_number_label[take_coin_number].place(x=340 + (40 * 3) + 40 + 40 + 60 + 30, y=15 + 40 + 5)
                    elif take_coin_number == 2:
                        remade_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40 + 60 + 40 + 20, 15 + 40 + 100, 340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 15 + 40 + 40 + 100, width=3, fill="#00FF00", outline="black")
                        self.green_number_label[take_coin_number].place(x=340 + (40 * 3) + 40 + 40 + 60 + 30, y=15 + 40 + 100 + 5)
                    else:
                        remade_coin = self.make_canvas.create_oval(340+(40*3)+40, 15 + 40 + 100, 340+(40*3)+40 + 40, 15 + 40 + 40 + 100, width=3, fill="#00FF00", outline="black")
                        self.green_number_label[take_coin_number].place(x=340+(40*3) + 40 + 10, y=15 + 40 + 100 + 5)

                    self.made_green_coin[take_coin_number] = remade_coin


        if  color_coin != "yellow":
            for take_coin_number in range(len(self.yellow_coord_store)):
                if  self.yellow_coord_store[take_coin_number] == counter_coin:
                    if path_to_traverse_before_overlap == 6:
                        self.six_with_overlap = 1
                    else:
                        self.time_for -= 1

                    self.make_canvas.delete(self.made_yellow_coin[take_coin_number])
                    self.yellow_number_label[take_coin_number].place_forget()
                    self.yellow_coin_position[take_coin_number] = -1
                    self.yellow_coord_store[take_coin_number] = -1

                    if take_coin_number == 0:
                        remade_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40, 340+80+15, 340 + (40 * 3) + 40 + 40, 340+80+40+15, width=3, fill="yellow", outline="black")
                        self.yellow_number_label[take_coin_number].place(x=340+(40*3) + 40 + 10, y=30 + (40*6)+(40*3)+40+10)
                    elif take_coin_number == 1:
                        remade_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40 + 60 + 40 + 20, 340+80+15, 340 + (40 * 3) + 40 + 60 + 40 + 40+20, 340+80+40+15, width=3, fill="yellow", outline="black")
                        self.yellow_number_label[take_coin_number].place(x=340+(40*3)+ 40 + 40+ 60 + 30, y=30 + (40*6)+(40*3)+40+10)
                    elif take_coin_number == 2:
                        remade_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40 + 60 + 40 + 20, 340 + 80 + 60 + 40 + 15, 340 + (40 * 3) + 40 + 60 + 40 + 40 + 20, 340 + 80 + 60 + 40 + 40 + 15, width=3, fill="yellow", outline="black")
                        self.yellow_number_label[take_coin_number].place(x=340+(40*3)+ 40 + 40+ 60 + 30, y=30 + (40*6)+(40*3)+40+100+10)
                    else:
                        remade_coin = self.make_canvas.create_oval(340 + (40 * 3) + 40, 340+80+60+40+15, 340 + (40 * 3) + 40 + 40,340+80+60+40+40+15, width=3, fill="yellow", outline="black")
                        self.yellow_number_label[take_coin_number].place(x=340 + (40 * 3) + 40 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 100 + 10)

                    self.made_yellow_coin[take_coin_number] = remade_coin

        if  color_coin != "sky_blue":
            for take_coin_number in range(len(self.sky_blue_coord_store)):
                if  self.sky_blue_coord_store[take_coin_number] == counter_coin:
                    if path_to_traverse_before_overlap == 6:
                        self.six_with_overlap = 1
                    else:
                        self.time_for -= 1

                    self.make_canvas.delete(self.made_sky_blue_coin[take_coin_number])
                    self.sky_blue_number_label[take_coin_number].place_forget()
                    self.sky_blue_coin_position[take_coin_number] = -1
                    self.sky_blue_coord_store[take_coin_number]=-1

                    if take_coin_number == 0:
                        remade_coin = self.make_canvas.create_oval(100 + 40, 340+80+15, 100 + 40 + 40, 340+80+40+15, width=3, fill="#04d9ff", outline="black")
                        self.sky_blue_number_label[take_coin_number].place(x=100+40+10, y=30 + (40*6)+(40*3)+40+10)
                    elif take_coin_number == 1:
                        remade_coin = self.make_canvas.create_oval(100 + 40 + 60 + 40+20, 340+80+15, 100 + 40 + 60 + 40 + 40+20, 340+80+40+15, width=3, fill="#04d9ff", outline="black")
                        self.sky_blue_number_label[take_coin_number].place(x=100 + 40 + 60 +60 + 10, y=30 + (40*6)+(40*3)+40+10)
                    elif take_coin_number == 2:
                        remade_coin = self.make_canvas.create_oval(100 + 40 + 60 + 40 + 20, 340 + 80 + 60 + 40 + 15, 100 + 40 + 60 + 40 + 40 + 20, 340 + 80 + 60 + 40 + 40 + 15, width=3, fill="#04d9ff", outline="black")
                        self.sky_blue_number_label[take_coin_number].place(x=100 + 40 + 60 + 60 + 10, y=30 + (40 * 6) + (40 * 3) + 40 + 60 + 40 + 10)
                    else:
                        remade_coin = self.make_canvas.create_oval( 100 + 40, 340+80+60+40+15, 100 + 40 + 40, 340+80+60+40+40+15, width=3, fill="#04d9ff", outline="black")
                        self.sky_blue_number_label[take_coin_number].place(x=100+40+10, y=30 + (40*6)+(40*3)+40+60+40+10)

                    self.made_sky_blue_coin[take_coin_number] = remade_coin


    def under_room_traversal_control(self,specific_coin,number_label,number_label_x,number_label_y,path_counter,counter_coin,color_coin):
        if color_coin == "red" and counter_coin >= 100:
            if int(counter_coin)+int(path_counter)<=106:
               counter_coin = self.room_red_traversal(specific_coin, number_label, number_label_x, number_label_y, path_counter, counter_coin)

        elif color_coin == "green" and counter_coin >= 100:
            if  int(counter_coin) + int(path_counter) <= 106:
                counter_coin = self.room_green_traversal(specific_coin, number_label, number_label_x, number_label_y,path_counter,counter_coin)

        elif color_coin == "yellow" and counter_coin >= 100:
            if  int(counter_coin) + int(path_counter) <= 106:
                counter_coin = self.room_yellow_traversal(specific_coin, number_label, number_label_x, number_label_y,path_counter,counter_coin)

        elif color_coin == "sky_blue" and counter_coin >= 100:
            if  int(counter_coin) + int(path_counter) <= 106:
                counter_coin = self.room_sky_blue_traversal(specific_coin, number_label, number_label_x, number_label_y,path_counter,counter_coin)

        return counter_coin


    def room_red_traversal(self, specific_coin, number_label, number_label_x, number_label_y, path_counter, counter_coin):
        while path_counter>0:
            counter_coin += 1
            path_counter -= 1
            self.make_canvas.move(specific_coin, 40, 0)
            number_label_x+=40
            number_label.place(x=number_label_x,y=number_label_y)
            self.root.update()
            time.sleep(0.2)
        return counter_coin

    def room_green_traversal(self, specific_coin, number_label, number_label_x, number_label_y, path_counter, counter_coin):
        while path_counter > 0:
            counter_coin += 1
            path_counter -= 1
            self.make_canvas.move(specific_coin, 0, 40)
            number_label_y += 40
            number_label.place(x=number_label_x, y=number_label_y)
            self.root.update()
            time.sleep(0.2)
        return counter_coin

    def room_yellow_traversal(self, specific_coin, number_label, number_label_x, number_label_y,path_counter,counter_coin):
        while path_counter > 0:
            counter_coin += 1
            path_counter -= 1
            self.make_canvas.move(specific_coin, -40, 0)
            number_label_x -= 40
            number_label.place(x=number_label_x, y=number_label_y)
            self.root.update()
            time.sleep(0.2)
        return counter_coin

    def room_sky_blue_traversal(self, specific_coin, number_label, number_label_x, number_label_y,path_counter,counter_coin):
        while path_counter > 0:
            counter_coin += 1
            path_counter -= 1
            self.make_canvas.move(specific_coin, 0, -40)
            number_label_y -= 40
            number_label.place(x=number_label_x, y=number_label_y)
            self.root.update()
            time.sleep(0.2)
        return counter_coin

    def check_winner_and_runner(self,color_coin):
        destination_reached = 0 # Check for all specific color coins
        if color_coin == "red":
            temp_store = self.red_coord_store
            temp_delete = 0# Player index
        elif color_coin == "green":
            temp_store = self.green_coord_store
            temp_delete = 3# Player index
        elif color_coin == "yellow":
            temp_store = self.yellow_coord_store
            temp_delete = 2# Player index
        else:
            temp_store = self.sky_blue_coord_store
            temp_delete = 1# Player index

        for take in temp_store:
            if take == 106:
                destination_reached = 1
            else:
                destination_reached = 0
                break

        if  destination_reached == 1:# If all coins in block reach to the destination, winner and runner check
            self.take_permission += 1
            if self.take_permission == 1:# Winner check
                messagebox.showinfo("Winner","Congrats! You are the winner")
            elif self.take_permission == 2:# 1st runner check
                messagebox.showinfo("Winner", "Wow! You are 1st runner")
            elif self.take_permission == 3:# 2nd runner check
                messagebox.showinfo("Winner", "Wow! You are 2nd runner")

            self.block_value_predict[temp_delete][1]['state'] = DISABLED
            self.total_people_play.remove(temp_delete)

            if len(self.total_people_play) == 1:
                messagebox.showinfo("Game Over","Good bye!!!!")
                self.block_value_predict[0][1]['state'] = DISABLED
                return False
            else:
                self.time_for-=1
        else:
            print("Winner not decided")

        return True

    # Input value checking
    def input_filtering(self,coin_number):
        try:
            if (4>=int(coin_number)>=1) or type(coin_number) == int:
                return True
            else:
                return False
        except:
            return False




class Move:
    def __init__(self):
        self.red_counter = 0
        self.yellow_counter = 0
        self.green_counter = 0
        self.blue_counter = 0

# Initialize the user details array
userDetails = [[None] * 200, [None] * 200]


# Function to create an account
def createAccount():
    # Function to get a valid username
    def getValidUsername():
        while True:
            inputUsername = entry_username.get()
            if len(inputUsername) > 0:
                return inputUsername
            else:
                error_label.config(text="Please make a Username")
                break

    # Function to get a valid password
    def getValidPassword():
        while True:
            inputPassword = entry_password.get()
            rePassword = entry_repassword.get()

            if len(inputPassword) > 0:
                return inputPassword

            if inputPassword != rePassword:
                error_label.config(text="Passwords don't match, please try again")

            elif not (0 < len(inputPassword) < 9):
                error_label.config(text="Password should be more than 0 and less than 9 characters")

            elif inputPassword == "" or not rePassword == "":
                error_label.config(text="Password is required")
            break

    # Function for ASCII conversion for username
    def convertToAsciiUsername(inputUsername):
        return [ord(char) for char in inputUsername]

    # Function for ASCII conversion for password
    def convertToAsciiPassword(inputPassword):
        return [ord(char) for char in inputPassword]

    # Function to create an account
    def createAccount():
        inputUsername = getValidUsername()
        checkUsername = convertToAsciiUsername(inputUsername)
        total = sum(checkUsername)
        asciiValue = total % 200

        # Finding an empty slot for the username
        while userDetails[0][asciiValue] is not None:
            asciiValue = (asciiValue + 1) % 200

        # Check for password match
        inputPassword = getValidPassword()

        userDetails[0][asciiValue] = inputUsername
        userDetails[1][asciiValue] = inputPassword
        error_label.config(text="Account created successfully")
        showGameOptionsWindow()

        while True:
            inputPassword = entry_password.get()
            rePassword = entry_repassword.get()

            if inputPassword != rePassword:
                error_label.config(text="Passwords don't match, please try again")

            elif (len(inputPassword) > 8):
                error_label.config(text="Password should be more than 0 and less than 9 characters")

            elif inputPassword == "" or  rePassword == "":
                error_label.config(text="Password is required")
            break

    # GUI setup for Create Account

    create_account_frame = tk.Frame(root)
    create_account_frame.place(x=0, y=0, relwidth=1, relheight=1)

    heading_label = tk.Label(root, text="CREATE ACCOUNT", font=('arial', 15, 'bold'), fg='red')
    heading_label.pack(side=tk.TOP, anchor=tk.NW, pady=10)

    label_username = tk.Label(create_account_frame, text="Enter username:", font=('arial', 10))
    label_username.pack()
    entry_username = tk.Entry(create_account_frame, bd=2, relief="solid", width=30)
    entry_username.pack()

    label_password = tk.Label(create_account_frame, text="Enter password:", font=('arial', 10))
    label_password.pack()
    entry_password = tk.Entry(create_account_frame, show="*", bd=2, relief="solid", width=30)
    entry_password.pack()

    label_repassword = tk.Label(create_account_frame, text="Re-enter password:", font=('arial', 10))
    label_repassword.pack()
    entry_repassword = tk.Entry(create_account_frame, show="*", bd=2, relief="solid", width=30)
    entry_repassword.pack()

    btn_create_account = tk.Button(create_account_frame, text="DONE", command=createAccount, bg='red', font='arial')
    btn_create_account.pack(side=tk.RIGHT, anchor=tk.SE)

    error_label = tk.Label(create_account_frame, text="", font=('arial', 10, 'italic'), fg='red')
    error_label.pack(pady=5)

    # checking if passwords match
    def checkPassword():
        if entry_repassword.pack() != entry_password.pack():
            error_label.config(text="Passwords do not match")
        else:
            error_label.config(text="")


# Function to log in
def login():
    # Function to check if username exists
    def usernameExists(inputUsername):
        asciiValue = convertToAscii(inputUsername)
        return userDetails[0][asciiValue] is not None

    # Function to validate password
    def validatePassword(inputUsername, inputPassword):
        asciiValue = convertToAscii(inputUsername)
        return userDetails[1][asciiValue] == inputPassword

    # Function to convert username to ASCII
    def convertToAscii(username):
        maxLength = len(username)
        checkUsername = [ord(char) for char in username]
        total = sum(checkUsername)
        return total // maxLength

    # Function for the login process
    def loginProcess():
        inputUsername = entry_username_login.get()
        inputPassword = entry_password_login.get()

        if not inputUsername:
            error_label_login.config(text="Username is required")
        elif not inputPassword:
            error_label_login.config(text="Password is required")
        elif usernameExists(inputUsername) and validatePassword(inputUsername, inputPassword):
            error_label_login.config(text="Login successful!")

        else:
            error_label_login.config(text="Invalid username or password. Please try again.")

    # GUI setup for Login
    login_frame = tk.Frame(root)
    login_frame.place(x=0, y=0, relwidth=1, relheight=1)

    heading_label_login = tk.Label(root, text="LOGIN", font=('arial', 15, 'bold'), fg='red')
    heading_label_login.pack(side=tk.TOP, pady=10)

    label_username_login = tk.Label(login_frame, text="Enter your username:", font=('arial', 10))
    label_username_login.pack()
    entry_username_login = tk.Entry(login_frame, bd=2, relief="solid", width=30)
    entry_username_login.pack()

    label_password_login = tk.Label(login_frame, text="Enter your password:", font=('arial', 10))
    label_password_login.pack()
    entry_password_login = tk.Entry(login_frame, show="*", bd=2, relief="solid", width=30)
    entry_password_login.pack()

    btn_login = tk.Button(login_frame, text="DONE", command=loginProcess, bg='red', font='arial')
    btn_login.pack(side=tk.RIGHT, anchor=tk.E)

    error_label_login = tk.Label(login_frame, text="", font=('arial', 10, 'italic'), fg='red')
    error_label_login.pack(pady=5)


# Function to show the main screen after login
def showMainScreen():
    print("Showing the main screen")


# GUI setup for the Start Screen
root = tk.Tk()
root.title("Ludo Game")

root.configure(bg="#2c7da0")
# Load Ludo board image
ludo_board_image = PhotoImage(file="C:/Users/Arya/OneDrive/Pictures/Screenshots/Screenshot 2023-12-27 193043.png")
resized_image = ludo_board_image.subsample(2, 2)
# Ludo board image label
image_label = tk.Label(root, image=ludo_board_image)
image_label.pack(side=tk.TOP, anchor=tk.N)

# Welcome message
welcome_message = """WELCOME TO A TIMELESS CLASSIC OF LUDO 
WHERE STRATEGY MEETS FUN IN A GAME THAT IS LOVED BY ALL 
AGES"""

welcome_label = tk.Label(root, text=welcome_message, font=('georgia', 15, 'bold'))
welcome_label.pack(pady=10)

# Buttons for creating an account and logging in
btn_create_account = tk.Button(root, text="CREATE ACCOUNT ", command=createAccount, bg='red', fg='white',
                               font=('arial,20'))
btn_create_account.pack(side=tk.LEFT, padx=10)

btn_login = tk.Button(root, text="LOGIN", command=login, bg='blue', fg='white', font=('arial,20'))
btn_login.pack(side=tk.RIGHT)


def showRuleBook():
    # window for the rule book
    rule_book_frame = tk.Frame(root)
    rule_book_frame.place(x=0, y=0, relwidth=1, relheight=1)

    # Setting2 light green background
    rule_book_frame.configure(bg='#C1FFC1')

    # Title
    title_label = tk.Label(rule_book_frame, text="RULES OF THE GAME", font=('Georgia', 18, 'bold'), fg='red',
                           bg='#C1FFC1')
    title_label.pack(pady=10)

    # Rule Book Text
    rule_book_text = """
    1.Each player rolls a dice. Players alternate turns in a clockwise direction. To enter a token into play from its yard to its starting square, a player must roll a six. 
      Players can draw a token from home every time they get a six unless the home is empty or move a piece six times. 

    2.The start box has two own tokens (is doubled). 
      If the player has no tokens yet in play and rolls other than a six, the turn passes to the next player.

    3.Players must always move a token according to the die value rolled. 
      Once players have one or more tokens in play, they select a token and move it forwards along the track the number of squares indicated by the die. 

    4.If you roll a certain number and that forces your token to land on a spot occupied by another person's token then you capture that token and force the person to return that token back to their home point. 
      This forces them to roll another 6 to take it out of their home and move it again.

    5.While doing your turn, if 2 of your tokens land on the same spot then they create something that is called a block. 
      A block means that if an opposing token lands on the same spot as the block, the player is forced to return the token back to their home base.

    6.If the player cannot draw a token from home, rolling a six earns the player an additional or "bonus" roll in that turn. 
      If the bonus roll results in a six again, the player earns again an additional bonus roll. 
      If the third roll is also a six, the player may not move and the turn immediately passes to the next player.

    7.If the advance of a token ends on a square occupied by an opponent's token, the opponent token is returned to its owner's yard. 
      The returned token can be re-entered into play only when the owner rolls a six.

    8.If a piece lands on the same space as another piece of the same colour, the pieces are doubled and form a "block". 
      If the advance of a block ends on an opponent’s block, the latter is captured and returned to its owner’s yard, collectively.

    9.A player's home column squares are always safe, since no opponent may enter them. 
      In the home column, a player cannot jump over; after one rotation is completed, the player must enter the home and roll the exact number needed to get each token onto the home triangle.

      Once you have gotten all your tokens into the home triangle, if you are the first person to do so, you have won the game and in house rules you can wait for the others to finish and get 2nd, 3rd or 4th.
    """

    # Add a label with red text to display the rules
    rules_label = tk.Label(rule_book_frame, text=rule_book_text, font=('Georgia', 12), fg='#bde0fe', bg='#023e8a',
                           justify=tk.LEFT)
    rules_label.pack(padx=20, pady=20)

    # Button to show game modes
    btn_rule_book = tk.Button(rule_book_frame, text="SHOW GAME MODES", command=chooseOption, bg='blue', fg='white',
                              font=('Arial', 12))
    btn_rule_book.pack(side=tk.BOTTOM, pady=10)


def handleOptionYes():
    # Handle 'Yes' response
    print("User has played the game before")
    play_ludo()

def handleOptionNo():
    print("User has not played the game before")
    showRuleBook()

def call_Ludo_class():
    my_instance = Ludo()
def showGameOptionsWindow():
    # Function to handle the new window with game options
    game_options_frame = tk.Frame(root)
    game_options_frame.place(x=0, y=0, relwidth=1, relheight=1)

    heading_label_options = tk.Label(game_options_frame, text="Have you played Ludo before?",
                                     font=('arial', 20, 'bold'), fg='blue')
    heading_label_options.pack(pady=10)

    btn_yes = tk.Button(game_options_frame, text="Yes", command=call_class, bg='red', fg='white',
                        font=('arial,40'))
    btn_yes.pack(pady=10)
    btn_no = tk.Button(game_options_frame, text="No", command=handleOptionNo, bg='red', fg='white', font=('arial,40'))
    btn_no.pack(pady=10)

def call_class():
    instance = Ludo()
def chooseOption():
    game_mode_frame = tk.Frame(root)
    game_mode_frame.place(x=0, y=0, relwidth=1, relheight=1)

    label = tk.Label(root, text="GAME MODES ", bg="red", fg="white", font=("Georgia", 20))
    label.pack(side=tk.TOP, pady=(10, 2))

    # Frame for buttons
    button_frame = tk.Frame(root)
    button_frame.pack()


    # Button 1 (Single Player vs AI)
    local_multiplayer_button = tk.Button(button_frame, text="SINGLE PLAYER vs AI",
                                         command=lambda: play_ludo(),
                                         bg="blue", fg="white", font=("Georgia", 14))
    local_multiplayer_button.pack(side=tk.LEFT, padx=100, pady=(2,2), ipadx=20, ipady=10)  # option 1 button

    # Button 2 (Local Multiplayer)
    single_player_button = tk.Button(button_frame, text="LOCAL MULTIPLAYER (2-4 PLAYERS)",
                                     command=call_class, bg="green", fg="white",
                                     font=("Georgia", 14))
    single_player_button.pack(side=tk.RIGHT, padx=100, pady=(2,2), ipadx=20, ipady=10)# option 2 button




# Global variables
player_pos = {i: 0 for i in range(4)}  # Initialising positions for 4 player tokens
ai_pos = {i: 0 for i in range(4)}  # Initialising positions for 4 AI tokens

# Function to roll a dice
def roll_dice():
    return random.randint(1, 6)

# Function to move a token
def move_token(pos, steps):
    pos += steps
    if pos > 106:
        pos = 106
    return pos

# Function to check if a player has won
def check_win(pos_dict):
    return all(pos >= 106 for pos in pos_dict.values())

# Function to change the value of dice as per button click
def rolldice():
    dice = ['\u2680', '\u2681', '\u2682', '\u2683', '\u2684', '\u2685']
    dice_value = random.choice(dice)
    label.config(text=dice_value)
    label.pack()
    selected_token = select_token()
    if selected_token is not None:
        player_move(dice.index(dice_value) + 1, selected_token)  # Move the token based on the dice value

# Function for player move
def player_move(steps, selected_token):
    global player_pos
    player_pos[selected_token] = move_token(player_pos[selected_token], steps)
    display_board()

    if check_win(player_pos):
        result_label.config(text="Congratulations! You win!")
        return

    ai_move()

# Function for AI move
def ai_move():
    global ai_pos
    ai_token_to_move = random.randint(0, 3)  # Choose a random AI token
    ai_roll = roll_dice()
    ai_pos[ai_token_to_move] = move_token(ai_pos[ai_token_to_move], ai_roll)
    display_board()

    if check_win(ai_pos):
        result_label.config(text="Sorry, the AI wins. Better luck next time!")
        return

# Function to display the current board state
def display_board():
    for i, (player, ai) in enumerate(zip(player_pos.values(), ai_pos.values())):
        player_label[i].config(text=f"Player {i + 1}: {player}")
        ai_label[i].config(text=f"AI {i + 1}: {ai}")

error_label_select_token = None
# Function to prompt the user to select a token
def select_token():
    if not token_entry.get().isdigit():
        return None
    token_number = int(token_entry.get())
    if token_number < 1 or token_number > 4:
        error_label_select_token.config(text="Enter a number (1-4)")


    return token_number - 1

# Function to move the token based on user input
def move_selected_token():
    steps = int(label.cget("text"))  # Get the steps from the dice roll
    selected_token = select_token()  # Get the selected token
    if selected_token is not None:
        player_move(steps, selected_token)

# Main function to start the game
def play_ludo():
    global root, player_label, ai_label, label, result_label, token_entry

    root = tk.Tk()
    root.title("Ludo AI mode")
    root.configure(bg="#118ab2")

    # initialising player and AI label
    player_label = [None] * 4
    ai_label = [None] * 4

    for i in range(4):
        player_label[i] = Label(root, font=('helvetica', 16), text=f"Player {i + 1}: 0")
        player_label[i].pack()

        ai_label[i] = Label(root, font=('helvetica', 16), text=f"AI {i + 1}: 0")
        ai_label[i].pack()

    roll_button = Button(root, font=('helvetica', 30), text="Roll!", command=rolldice, bg="orange")
    roll_button.pack()

    label = Label(root, font=('helvetica', 250, 'bold'), text='')
    label.pack()

    result_label = Label(root, font=('helvetica', 16))
    result_label.pack()

    # Label and entry widget for token selection
    token_label = Label(root, font=('arial', 30, 'bold'), text="Enter Token number(1-4)", fg='red')
    token_label.pack(side=tk.LEFT)

    token_entry = Entry(root, width=40)
    token_entry.pack(side=tk.LEFT)

    move_token_button = Button(root, text="Move Token", command=move_selected_token)
    move_token_button.pack()

if __name__ == "__main__":
    def main():
              main()
    root = Tk()
    root.maxsize(1920, 1080)
    root.minsize(800, 400)
    root.title("Ludo Game")

    six_side_block = PhotoImage(file="C:/Users/Arya/OneDrive/Desktop/Ludo-Game/Images/6_block.png")
    five_side_block = PhotoImage(file="C:/Users/Arya/OneDrive/Desktop/Ludo-Game/Images/5_block.png")
    four_side_block = PhotoImage(file="C:/Users/Arya/OneDrive/Desktop/Ludo-Game/Images/4_block.png")
    three_side_block = PhotoImage(file="C:/Users/Arya/OneDrive/Desktop/Ludo-Game/Images/3_block.png")
    two_side_block = PhotoImage(file="C:/Users/Arya/OneDrive/Desktop/Ludo-Game/Images/2_block.png")
    one_side_block = PhotoImage(file="C:/Users/Arya/OneDrive/Desktop/Ludo-Game/Images/1_block.png")

    Ludo(root, six_side_block, five_side_block, four_side_block, three_side_block, two_side_block, one_side_block)

    root.mainloop()

